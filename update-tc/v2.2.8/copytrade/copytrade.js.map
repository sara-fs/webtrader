{"version":3,"sources":["../../../../src/copytrade/copytrade.es6"],"names":["getLoggedInUserId","local_storage","get","id","TRADE_TYPES","trade_types","form_error_messages","INVALID_STAKE_LIMIT","i18n","TOKEN_ALREADY_ADDED","ENTER_VALID_TOKEN","REFRESH_FAILED","getStorageName","DEFAULT_TRADE_TYPES","slice","map","m","api_code","defaultCopySettings","traderApiToken","copy_start","min_trade_stake","max_trade_stake","assets","_","cloneDeep","DEFAULT_ASSETS","defaultTraderDetails","loginid","open","started","disableStart","yourCopySettings","validate_min_max_stake","yourCopySettingsData","updateLocalStorage","debounce","clonedScope","scope","searchToken","disable","set","GROUPED_INTRUMENTS","then","flatten","instruments","displayName","display_name","submarkets","mm","forEach","eGrp","eSubGrp","symbol","push","code","name","state","masterAssetList","groupedAssets","filter","f","refreshTraderStats","token","Promise","resolve","reject","liveapi","send","copytrading_statistics","trader_id","copyStatData","traderTokenDetails","find","traderTokens","merge","traderStatistics","catch","e","win","win_view","masterTradeTypeList","is_loading","is_virtual","allowCopy","allow_copiers","onAllowCopyChangeCopierCellClick","onChangeCopytradeSettings","onAllowCopyChangeTraderCellClick","set_settings","settings","$","growl","error","message","onOpenChange","index","onStartedChange","newStarted","fromLocalStorage","currentTraderTokenDetails_localSto","newObj","splice","defer","settingsToSend","length","disableKeypressChars","copy_stop","onRemove","toBeRemovedItem","onRefresh","trader","disableRefresh","console","onMinTradeChange","event","formatAndSetTradeStake","onMaxTradeChange","type_trade_stake","target","data","value","format_amount","isNil","match","onUpdateYourSettings","notice","onTokenChange","onKeyDown","keyCode","addToken","some","tokenUserData","Error","openTokenMgmt","click","initConfigWindow","root","html","rv","bind","windows","createBlankWindow","title","resizable","collapsable","minimizable","maximizable","modal","width","copyTrade","isVirtual","cached","get_settings","traderToken","close","unbind","dialog","remove","track","module_id","is_unique","input_el_ids","comma_separated_ids","join","keypress","evt","which","preventDefault","init","$menuLink","moveToTop"],"mappings":"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","file":"copytrade.js","sourcesContent":["import $ from 'jquery';\nimport windows from '../windows/windows';\nimport rv from '../common/rivetsExtra';\nimport _ from 'lodash';\nimport html from 'text!./copytrade.html';\nimport 'css!./copytrade.css';\nimport { trade_types } from '../common/common';\nimport '../common/util';\nimport liveapi from 'websockets/binary_websockets';\nimport validateToken from 'websockets/validateToken';\nimport { init as instrumentPromise } from '../instruments/instruments';\n\n// While using copy trader, this cannot be NULL\nconst getLoggedInUserId = () => local_storage.get(\"oauth\")[0].id;\n\nconst TRADE_TYPES = trade_types;\n\nconst form_error_messages = {\n    INVALID_STAKE_LIMIT: 'Min trade stake should be lower than max trade stake.'.i18n(),\n    TOKEN_ALREADY_ADDED: 'Token already added'.i18n(),\n    ENTER_VALID_TOKEN: 'Enter a valid trader token'.i18n(),\n    REFRESH_FAILED: 'Refresh failed'.i18n(),\n};\n\nconst getStorageName = () => `copyTrade_${getLoggedInUserId()}`;\n\nconst DEFAULT_TRADE_TYPES = TRADE_TYPES.slice(0, 2).map(m => m.api_code);\n\nconst defaultCopySettings = (traderApiToken) => ({\n  copy_start: traderApiToken,\n  min_trade_stake: 10,\n  max_trade_stake: 100,\n  assets: _.cloneDeep(DEFAULT_ASSETS),\n  trade_types: _.cloneDeep(DEFAULT_TRADE_TYPES),\n});\n\nconst defaultTraderDetails = (traderApiToken, loginid) => ({\n  open: false,\n  started: false,\n  disableStart: false,\n  loginid,\n  yourCopySettings: defaultCopySettings(traderApiToken),\n});\n\nconst validate_min_max_stake = (yourCopySettingsData) => {\n  const { min_trade_stake, max_trade_stake } = yourCopySettingsData;\n  if (+min_trade_stake > +max_trade_stake) {\n    return false;\n  }\n  return true;\n};\n\nconst updateLocalStorage = _.debounce(scope => {\n  const clonedScope = _.cloneDeep(scope);\n  delete clonedScope.searchToken.disable;\n  local_storage.set(getStorageName(), clonedScope);\n}, 50);\n\nlet GROUPED_INTRUMENTS = null; // For nice display purpose only\nlet DEFAULT_ASSETS = null;\n//Get instrument list\ninstrumentPromise().then(instruments => {\n  GROUPED_INTRUMENTS = _.flatten(instruments.map(m => {\n    const displayName = m.display_name;\n    return m.submarkets.map(mm => ({\n      displayName: `${displayName} - ${mm.display_name}`,\n      instruments: mm.instruments,\n    }));\n  }));\n  let assets = [];\n  instruments.forEach(eGrp => {\n    eGrp.submarkets.forEach(eSubGrp => {\n      eSubGrp.instruments.forEach(({ symbol, display_name }) => {\n        assets.push({\n          code: symbol,\n          name: display_name,\n        });\n      });\n    });\n  });\n  state.masterAssetList = assets;\n  state.groupedAssets = GROUPED_INTRUMENTS;\n  // Randomly add top 2 assets in default list\n  DEFAULT_ASSETS = assets.filter(f => f.code === 'R_10').map(m => m.code);\n});\n\nconst refreshTraderStats = (loginid, token, scope) => {\n  return new Promise((resolve, reject) => {\n    liveapi\n      .send({\n        copytrading_statistics: 1,\n        trader_id: loginid,\n      })\n      .then((copyStatData) => {\n        if (copyStatData.copytrading_statistics) {\n          const traderTokenDetails = _.find(scope.traderTokens, f =>\n            f.yourCopySettings && f.yourCopySettings.copy_start === token);\n          //Check if we already added this trader. If yes, then merge the changes\n          if (traderTokenDetails) {\n            _.merge(traderTokenDetails.traderStatistics, copyStatData.copytrading_statistics);\n          }\n          //If not added, then add this along with default yourCopySettings object\n          else {\n            scope.traderTokens.push(_.merge({\n              traderStatistics: copyStatData.copytrading_statistics,\n            }, defaultTraderDetails(token, loginid)));\n          }\n        }\n        updateLocalStorage(scope);\n        resolve();\n      }).catch((e) => {\n        reject(e);\n      });\n  });\n};\n\nlet win = null, win_view = null;\n\nconst state = {\n  masterAssetList: [],\n  masterTradeTypeList: _.cloneDeep(TRADE_TYPES),\n  groupedAssets: [],\n  is_loading: true,\n  is_virtual: true,\n  allowCopy: {\n    allow_copiers: 0,\n    onAllowCopyChangeCopierCellClick: () => state.onChangeCopytradeSettings(0),\n    onAllowCopyChangeTraderCellClick: () => state.onChangeCopytradeSettings(1),\n  },\n  onChangeCopytradeSettings: _.debounce((allow_copiers) => {\n    if (state.is_virtual) return;\n    if (state.allowCopy.allow_copiers === allow_copiers) return;\n\n    state.is_loading = true;\n\n    liveapi\n      .send({\n        set_settings: 1,\n        allow_copiers,\n      })\n      // set_settings api res does not have updated settings\n      .then((settings) => {\n        state.is_loading = false;\n        state.allowCopy.allow_copiers = allow_copiers;\n      })\n      .catch(e => {\n        state.is_loading = false;\n        $.growl.error({ message: e.message });\n      });\n  }, 250),\n  onOpenChange: (index) => {\n    state.traderTokens[index].open = !state.traderTokens[index].open;\n  },\n  onStartedChange: (index) => {\n    state.traderTokens[index].disableStart = true;\n    const newStarted = !state.traderTokens[index].started;\n    if (newStarted) {\n      //Start copying\n      //if started, revert back to last saved changes(in case user changed anything)\n      const fromLocalStorage = local_storage.get(getStorageName());\n      if (fromLocalStorage) {\n        const currentTraderTokenDetails_localSto = fromLocalStorage.traderTokens[index];\n        if (currentTraderTokenDetails_localSto) {\n          const newObj = {};\n          _.merge(newObj, state.traderTokens[index], currentTraderTokenDetails_localSto);\n          state.traderTokens.splice(index, 1);\n          //Have to apply this trick in order to trigger update of UI using rivetsjs.\n          _.defer(() => {\n            state.traderTokens.splice(index, 0, newObj);\n            const settingsToSend = _.cloneDeep(newObj.yourCopySettings);\n            if (!settingsToSend.min_trade_stake) delete settingsToSend.min_trade_stake;\n            if (!settingsToSend.max_trade_stake) delete settingsToSend.max_trade_stake;\n            if (!settingsToSend.assets || settingsToSend.assets.length <= 0) delete settingsToSend.assets;\n            if (!settingsToSend.trade_types || settingsToSend.trade_types.length <= 0) delete settingsToSend.trade_types;\n\n            liveapi\n              .send(settingsToSend)\n              .then(() => {\n                newObj.disableStart = false;\n                newObj.started = true;\n                disableKeypressChars('#max_trade_stake', '#min_trade_stake');\n                updateLocalStorage(state);\n              })\n              .catch(e => {\n                $.growl.error({ message: e.message });\n                newObj.disableStart = false;\n                disableKeypressChars('#max_trade_stake', '#min_trade_stake');\n                updateLocalStorage(state);\n              });\n          });\n        }\n      }\n    } else {\n      //Stop copying\n      liveapi.send({\n          copy_stop: state.traderTokens[index].yourCopySettings.copy_start\n        })\n        .then(() => {\n          state.traderTokens[index].disableStart = false;\n          state.traderTokens[index].started = false;\n          updateLocalStorage(state);\n        })\n        .catch(e => {\n          $.growl.error({ message: e.message });\n          state.traderTokens[index].disableStart = false;\n          updateLocalStorage(state);\n        });\n    }\n  },\n  onRemove: (index) => {\n    const toBeRemovedItem = state.traderTokens[index];\n    state.traderTokens.splice(index, 1);\n    updateLocalStorage(state);\n    liveapi.send({\n      copy_stop: toBeRemovedItem.yourCopySettings.copy_start\n    })\n    .catch(e => {});\n  },\n  onRefresh: (index) => {\n    const trader = state.traderTokens[index];\n    const loginid = trader.loginid;\n    const token = trader.yourCopySettings.copy_start;\n    if (loginid && token) {\n      trader.disableRefresh = true;\n      refreshTraderStats(loginid, token, state)\n        .then(() => {\n          trader.disableRefresh = false;\n        })\n        .catch((e) => {\n          console.error(e)\n          $.growl.error({ message: form_error_messages.REFRESH_FAILED });\n          trader.disableRefresh = false;\n        });\n    }\n  },\n  onMinTradeChange: (event, scope) => {\n    state.formatAndSetTradeStake(event, scope, 'min_trade_stake')\n  },\n  onMaxTradeChange: (event, scope) => {\n    state.formatAndSetTradeStake(event, scope, 'max_trade_stake')\n  },\n  formatAndSetTradeStake: (event, scope, type_trade_stake) => {\n    const index = $(event.target).data('index');\n    const value = event.target.value;\n    const format_amount = _.isNil(value) ? false : value.match(/0*(\\d+\\.?\\d{0,2})/);\n    if (format_amount) {\n      scope.traderTokens[index].yourCopySettings[type_trade_stake] = format_amount[1];\n    } else {\n      scope.traderTokens[index].yourCopySettings[type_trade_stake] = '';\n    }\n  },\n  onUpdateYourSettings: (index) => {\n    if (validate_min_max_stake(state.traderTokens[index].yourCopySettings)) {\n      updateLocalStorage(state);\n      $.growl.notice({ message: 'Updated successfully' });\n    } else {\n      $.growl.error({ message: form_error_messages.INVALID_STAKE_LIMIT });\n    }\n  },\n  searchToken: {\n    token: '',\n    onTokenChange: (event, scope) => scope.searchToken.token = event.target.value,\n    disable: false,\n    onKeyDown: (event, scope) => {\n      if (event.keyCode === 13) {\n        scope.searchToken.addToken(event, scope);\n      }\n    },\n    addToken: (event, scope) => {\n      //If searchToken.token is empty, do nothing\n      if (!scope.searchToken.token) {\n        $.growl.error({ message: form_error_messages.ENTER_VALID_TOKEN });\n        return;\n      }\n\n      //If already added, throw error\n      if (_.some(state.traderTokens, f => f.yourCopySettings.copy_start === scope.searchToken.token)) {\n        $.growl.error({ message: form_error_messages.TOKEN_ALREADY_ADDED });\n        return;\n      }\n\n      scope.searchToken.disable = true;\n\n      validateToken(scope.searchToken.token)\n        .then(tokenUserData => {\n          if (!tokenUserData) throw new Error('Invalid token');\n          refreshTraderStats(tokenUserData.loginid, scope.searchToken.token, scope)\n            .then(() => {\n              scope.searchToken.token = '';\n              scope.searchToken.disable = false;\n            })\n            .catch((error) => {\n              scope.searchToken.disable = false;\n              console.error(error);\n              $.growl.error({ message: error.message });\n            });\n        })\n        .catch(error => {\n          $.growl.error({ message: error.message });\n          scope.searchToken.disable = false;\n        });\n    },\n  },\n  traderTokens: [],\n  openTokenMgmt: () => $('li.account ul a.token-management').click(),\n};\n\nconst initConfigWindow = () => {\n  const root = $(html).i18n();\n  win_view = rv.bind(root[0], state);\n  win = windows.createBlankWindow(root, {\n    title: 'Copy Trading'.i18n(),\n    resizable: false,\n    collapsable: false,\n    minimizable: true,\n    maximizable: false,\n    modal: false,\n    width: 600,\n    open: () => {\n      //Refresh all token details\n      const copyTrade = local_storage.get(getStorageName());\n      if (copyTrade) {\n        _.merge(state, copyTrade);\n        state.traderTokens = _.cloneDeep(state.traderTokens); // This is needed to trigger rivetsjs render\n      }\n      state.is_loading = true;\n      state.is_virtual = isVirtual();\n      //VRTC can only be copiers\n      if (state.is_virtual) {\n        state.is_loading = false;\n        state.allowCopy.allow_copiers = 0;\n      } else {\n        liveapi\n        .cached\n        .send({ get_settings: 1 })\n        .then((settings) => {\n          state.is_loading = false;\n          state.allowCopy.allow_copiers = settings.get_settings.allow_copiers;\n        })\n        .catch((e) => {\n          state.is_loading = false;\n          $.growl.error({ message: e.message });\n        });\n      }\n      //Refresh locally stored trader statistics\n      if (copyTrade) {\n        (async function () {\n          for (let traderToken of copyTrade.traderTokens) {\n            try {\n              const loginid = traderToken.loginid;\n              const token = traderToken.yourCopySettings.copy_start;\n              await refreshTraderStats(loginid, token, state);\n            } catch (e) {\n              console.error(e);\n              $.growl.error({ message: form_error_messages.REFRESH_FAILED });\n            }\n          }\n        })();\n      }\n    },\n    close: () => {\n      win_view && win_view.unbind();\n      win && win.dialog('destroy').remove();\n      win_view = win = null;\n      // Clear tokens\n      state.traderTokens = [];\n    },\n    'data-authorized' :'true',\n  });\n  win.track({\n    module_id: 'copyTrade',\n    is_unique: true,\n    data: null,\n  });\n  win.dialog( 'open' );\n};\n\nconst disableKeypressChars = (...input_el_ids) => {\n  if (input_el_ids.length > 0) {\n    const comma_separated_ids = input_el_ids.join(', ');\n    $(comma_separated_ids).keypress((evt) => {\n      if ((evt.which < 48 || evt.which > 57) && evt.which !== 8 && evt.which !== 46) {\n        evt.preventDefault();\n      }\n    });\n  }\n};\n\nexport const init = ($menuLink) => {\n  $menuLink.click(() => {\n    if (!win) {\n      initConfigWindow();\n      disableKeypressChars('#max_trade_stake', '#min_trade_stake');\n    }\n    else { win.moveToTop(); }\n  });\n};\n\nexport default { init }\n\n"]}